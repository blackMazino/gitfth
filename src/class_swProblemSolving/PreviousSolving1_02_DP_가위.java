package class_swProblemSolving;
 
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.StringTokenizer;
 
public class PreviousSolving1_02_DP_가위 {
/*
아래 그림 (1)과 같이 긴 종이 띠 위에 같은 크기의 사각형 칸이 연속적으로 그려져 있다.
각 칸에는 자연수 값이 적혀 있다. 이웃한 두 사각형 칸 사이를 가위로 잘라 하나의 종이 띠를 짧은 종이 띠 두 개로 분리할 수 있다.
입력으로 주어진 종이 띠를 최대 k 번까지 가위로 자를 수 있다고 가정하자. 따라서 최대 (k+1) 개의 짧은 종이 띠가 생길 수 있다.
 
종이 띠의 비용(cost)은 종이 띠에 있는 칸들의 최대 값과 최소 값의 차이로 정의된다.
특정 가위질의 비용은 그 가위질에 의해 생긴 최대 (k+1) 개의 짧은 종이 띠의 비용들 가운데 최대 값으로 정의된다.
 
예를 들어, 위의 그림 (1)처럼 종이 띠가 주어지고, k = 2 이라고 하자. 
그림 (2)처럼 가위질을 했다면, 첫 번째 종이 띠의 비용은 2 (= 3-1), 두 번째 종이 띠의 비용은 3 (= 4-1), 
세 번째 종이 띠의 비용은 0 (= 2-2)이 되어, 그림 (2)와 같은 가위질의 비용은 2, 3, 0 중의 최대 값인 3 이다. 
그러나 그림 (3)과 같은 방법으로 가위질을 한다면, 종이 띠의 비용이 각각 2, 2, 2가되어, 가위질의 비용이 2가 된다. 
따라서 그림 (3)의 가위질 비용이 그림 (2)의 가위질 비용보다 더 작게 된다. 사실, 이 예제에 대해선, 비용이 2 보다 작은 가위질은 존재하지 않는다. 
 
N 개의 칸을 갖는 종이 띠의 가장 왼쪽 칸부터 차례로 각 칸에 적혀 있는 자연수가 주어지고, 
가위를 사용할 수 있는 최대 횟수 k 가 입력으로 주어지면, 최소 비용의 가위질을 계산하여 그 최소 비용을 출력하는 프로그램을 작성하라.
 
[입력]
파일의 첫 줄에 케이스의 수를 나타내는 자연수 T 가 주어진다.
각 케이스의 첫 줄에 종이 띠의 칸의 개수인 정수 N (1 ≤ N ≤ 1000) 과 가위를 사용할 수 있는 최대 횟수 k (0 ≤ k < N) 가 차례대로 주어진다.
그 다음 줄에는 종이 띠의 가장 왼쪽 칸부터 각 칸에 적혀 있는 자연수 N 개가 차례대로 주어진다. 이 값은 모두 1 이상 1,000,000 이하이다.
 
[출력]
각 테스트 케이스의 답을 순서대로 표준출력으로 출력하며, 각 케이스마다 줄의 시작에 “#x”를 출력하여야 한다. 
이때 x는 케이스의 번호이며 1부터 시작한다. 그리고 공백을 하나 둔 후 가위질의 최소 비용을 출력한다.
(입력)
 
3
 
7 2
 
3 1 2 3 1 4 2
 
4 1
 
1 2 1 2
 
7 4
 
3 1 2 3 1 4 2
 
 
 
 
 
(출력)
 
#1 2
 
#2 1
 
#3 2
 
*/
     
     
    public static void main(String[] args) throws Exception {
        // TODO Auto-generated method stub
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;
        st = new StringTokenizer(br.readLine());
        int tc = Integer.parseInt(st.nextToken());
         
         
         
         
         
         
         
        //Case1
        //D[i][j] = 1~j번까지 i번 가위질 했을때의 최소비용
        //D[i][j] = Math.min( Math.max(D[i-1][k]), 마지막종이띠의 비용 )
         
         
         
        //Case2
        //비용이 얼마인 종이띠로 나누려면 몇번의 가위질을 해야되는가 라고 질문을 변경해보자
        //정답은 N의 범위 내에서 1,000,000 -1 이므로 0~999,999 이다. 
        //그렇다면 0~999999까지 주어진 가위질내에서 가능한지 구하면 된다
    }
}